#!/bin/bash

export appDir="/bin/gitmr"
export srcDir="${appDir}/src"
export utilsDir="${appDir}/utils"
export isDockerContainer=$(awk -F/ '$2 == "docker" {print "true"; exit 0}' /proc/1/cgroup )
if [[ "${isDockerContainer}" == "true" ]]; then
  export configDir="/conf"
  else
    export configDir="${appDir}/conf"
fi
export gitProjects="${configDir}/git.projects"

######################################################################################################

configureGitProjects() {
    node ${utilsDir}/vcs_menu.js
    vcs=$(cat ${configDir}/vcs.log)
    case "${vcs}" in
        Gitlab)
        sh ${srcDir}/gitlab-conf.sh
        exit 0;
        ;;
        Github)
        sh ${srcDir}/github-conf.sh
        exit 0;
        ;;
        *)
        log "error" "Error! invalid version control system [${vcs}]."
        exit 1
        ;;
    esac
}

prepareData() {
    sourceBranch="${1}"
    targetBranch="${2}"
    assignee_users="${3}"
    mr_title="${4}"
    labels="${5}"
    wip="${6}"
    projectAlias="${7}"
    vcs="${8}"
    draft=false
    
    # Get project's data from "${configDir}/git.projects"
    accessToken=`gpm -get "${projectAlias}" token`
    username=$(gpm -get "${projectAlias}" "username")
    owner=$(gpm -get "${projectAlias}" "owner")
    repo=$(gpm -get "${projectAlias}" "repo")
    domainName=$(gpm -get "${projectAlias}" "domainName")

    if [ -z "${sourceBranch}" ]; then
        # default sourceBranch is : the actual local branch
        sourceBranch=$(git rev-parse --abbrev-ref HEAD)
    fi

    if [ -z "${mr_title}" ]; then
        # default title is : the title of the last commit
        mr_title=$(git log --pretty=format:%s HEAD | head -n 1)
    fi

    if [ -z "${assignee_users}" ]; then
        # default assignee user is : the actual user's username
        assignee_users="${username}"
    fi


    if [ "${wip}" == "true" ]; then
        case "${vcs}" in
            "github")
            draft=true
            ;;
            "gitlab")
            mr_title="WIP:${mr_title}"
            assignee_user="${assignee_users%%,*}" # get only the first username
            ;;
        esac
    fi

    data="{
        \"username\":\"${username}\",
        \"accessToken\": \"${accessToken}\",
        \"repo\": \"${repo}\",
        \"sourceBranch\": \"${sourceBranch}\",
        \"targetBranch\": \"${targetBranch}\",
        \"mrTitle\": \"${mr_title}\",
        \"draft\": ${draft},
        \"labels\": \"${labels}\",
        \"assigneeUser\": \"${assignee_user}\",
        \"assigneeUsers\": \"${assignee_users}\",
        \"owner\": \"${owner}\",
        \"domainName\":\"${domainName}\"
    }"
    echo "${data}"
}

gpm() {
    cmd="${1}"
    param1="${2}"
    param2="${3}"
    sh ${srcDir}/gpm.sh "${cmd}" "${param1}" "${param2}" 
}

export -f gpm

log() {
    type="${1}"
    msg="${2}"
    case "${type}" in
        error)
            colorCode=31
            ;;
        success)
            colorCode=32
            ;;
        warning)
            colorCode=33
            ;;
        info)
            colorCode=37
            ;;
    esac
    echo -e "\e[${colorCode}m${msg}\e[0m"
}

export -f log

help() {
    log "info" "1- git mr -in {alias} -s {sourceBranch} -t {targetBranch} -a {assigneeUsers} -l {labels} -m {title} --wip"
    log "info" "    -in {alias}: git project alias (required)"
    log "info" "    -t {targetBranch}: target branch (required)"
    log "info" "    -s {sourceBranch}: source branch (optional). Default = actual local branch"
    log "info" "    -a {assigneeUsers}: assignee users, separated by ',' (optional). Default = actual user"
    log "info" "    -l {labels}: labels, separated by ',' (optional)"
    log "info" "    -m {title}: title (optional). Default = latest commit's title"
    log "info" "    --wip: indicates if 'work in progress' (optional). Default = false"
    log "info" "2- git mr --cnf: creates or updates project alias in (${gitProjects})"
    log "info" "3- git mr -rm {alias}: delete one project alias in (${gitProjects})"
    log "info" "4- git mr --rm: delete all project alias in (${gitProjects})"
    log "info" "5- git mr --ls: list all project alias in (${gitProjects})"
    log "info" "6- git mr -ae {alias}: check if an alias exist in (${gitProjects}). If so this function will return 'exist'"
    log "info" "7- git mr --version: version"
    log "info" "8- git mr -show {alias}: display alias data from (${gitProjects})."
    log "info" "9- git mr help: help"
}

export -f help

purge() {
    log "info" "Uninstall {{git mr}}..."
    read -p "? Do you really want to continue? [y/n]: " response
    case "${response}" in
        y|Y)
            zshrc=~/.zshrc
            bashrc=~/.bashrc
            target="export PATH=\\\$PATH:${appDir//\//\\/}"
            printf "\n==> Clean up ${zshrc}..."
            sed -i -E 's/'"${target}"'//g' ${zshrc}
            if [[ $? == 1 ]]; then log "error" "Error! failed."; exit 1; else printf "Done âœ”"; fi
            printf "\n==> Clean up ${bashrc}..."
            sed -i -E 's/'"${target}"'//g' ${bashrc}
            if [[ $? == 1 ]]; then log "error" "Error! failed."; exit 1; else printf "Done âœ”"; fi
            sudo rm -rf ${appDir}
            printf "\n==> Delete ${appDir}..."
            if [[ $? == 1 ]]; then log "error" "Error! failed."; exit 1; else printf "Done âœ”"; fi
            log "success" "git mr has been successfully removed."
            exit 0
            ;;
    esac
}

export -f purge
#############################################################################################

params=()

for arg in "$@"; do
    params+=("$arg")
done

sourceBranch=""
targetBranch=""
assignee_users=""
labels=""
mr_title=""
projectAlias=""
wip=""

for i in "${!params[@]}"; do
    case "${params[$i]}" in
        -s)
            sourceBranch="${params[$i+1]}"
            ;;
        -t)
            targetBranch="${params[$i+1]}"
            ;;
        -a)
            assignee_users="${assignee_users}${params[$i+1]}"
            ;;
        -l)
            labels="$labels${params[$i+1]}"
            ;;
        -m)
            mr_title="${params[$i+1]}"
            ;;
        --wip)
            wip="true"
            ;;
        -in)
            projectAlias="${params[$i+1]}"
            ;;
        --cnf)
            configureGitProjects
            exit 0
            ;;
        -rm)
            gpm -rm "${params[$i + 1]}"
            exit 0
            ;;
        --rm)
            gpm --rm
            exit 0
            ;;
        --ls)
            gpm --ls
            exit 0
            ;;
        -ae)
            gpm "${params[$i + 1]}"
            exit 0
            ;;
        --version|--v)
            echo `cat ${appDir}/version`
            exit 0
            ;;
        --help)
            help
            exit 0
            ;;
        --purge)
            purge
            exit 0
            ;;
    esac
done

if [[ -z "${targetBranch}" ]]; then
    log "error" "Error! target branch not found."
    log "info" "ðŸ‘‰ Run this command for help:"
    log "info" "ðŸ‘‰ git mr --help"
    exit 1;
fi

isAliasExist=$(gpm -ae "${projectAlias}")

if [[ -z "${isAliasExist}" ]]; then
    configureGitProjects
fi

vcs=$(gpm -get "${projectAlias}" "vcs")

if [[ -z "${vcs}" ]];then
    log "error" "Error! version control system not found."
    log "info" "ðŸ‘‰ Run this command to configure your git projects:"
    log "info" "ðŸ‘‰ git mr --cnf"
    exit 1;
fi

data=$(prepareData "${sourceBranch}" "${targetBranch}" "${assignee_users}" "${mr_title}" "${labels}" "${wip}" "${projectAlias}" "${vcs}") 

case "${vcs}" in
    gitlab)
        sh ${srcDir}/git-lmr.sh "${data}" 
        exit 0
    ;;
    github)
        sh ${srcDir}/git-hmr.sh "${data}"
        exit 0
    ;;
    *)
        log "error" "Error! Unsupported version control system."
        exit 1
    ;;
esac
