#!/bin/bash

export appDir="."
export srcDir="src"
export utilsDir="${appDir}/utils"
export isDockerContainer=$(awk -F/ '$2 == "docker" {print "true"; exit 0}' /proc/1/cgroup )

if [[ "${isDockerContainer}" == "true" ]]; then
  export configDir="/conf"
  else
    export configDir="${appDir}/conf"
fi

######################################################################################################

configureGitProjects() {
    node ${utilsDir}/vcs_menu.js
    vcs=$(cat ${configDir}/vcs.log)
    case "${vcs}" in
        Gitlab)
        sh ${srcDir}/gitlab-conf.sh
        exit 0;
        ;;
        Github)
        sh ${srcDir}/github-conf.sh
        exit 0;
        ;;
        *)
        printf "ðŸš¨Error! Invalid vcs: [$vcs].\n"
        ;;
    esac
}

prepareData() {
    sourceBranch="${1}"
    targetBranch="${2}"
    assignee_users="${3}"
    mr_title="${4}"
    labels="${5}"
    wip="${6}"
    projectAlias="${7}"
    vcs="${8}"
    draft=false

    # Get project's data from "${configDir}/git.projects"
    accessToken=$(gpm -get "${projectAlias}" "token")
    username=$(gpm -get "${projectAlias}" "username")
    owner=$(gpm -get "${projectAlias}" "owner")
    repo=$(gpm -get "${projectAlias}" "repo")

    if [ -z "${sourceBranch}" ]; then
        # default sourceBranch is : the actual local branch
        sourceBranch=$(git rev-parse --abbrev-ref HEAD)
    fi

    if [ -z "${mr_title}" ]; then
        # default title is : the title of the last commit
        mr_title=$(git log --pretty=format:%s HEAD | head -n 1)
    fi

    if [ -z "${assignee_users}" ]; then
        # default assignee user is : the actual user's username
        assignee_users="${username}"
    fi


    if [ "${wip}" == "true" ]; then
        case "${vcs}" in
            "github")
            draft=true
            ;;
            "gitlab")
            mr_title="WIP:${mr_title}"
            assignee_user="${assignee_users%%,*}" # get only the first username
            ;;
        esac
    fi


    data="{
        \"username\":\"${username}\",
        \"accessToken\": \"${accessToken}\",
        \"repo\": \"${repo}\",
        \"sourceBranch\": \"${sourceBranch}\",
        \"targetBranch\": \"${targetBranch}\",
        \"mrTitle\": \"${mr_title}\",
        \"draft\": ${draft},
        \"labels\": \"${labels}\",
        \"assigneeUser\": \"${assignee_user}\",
        \"assigneeUsers\": \"${assignee_users}\",
        \"owner\": \"${owner}\"
    }"
    echo "${data}"
}

gpm() {
    cmd="${1}"
    param1="${2}"
    param2="${3}"
    sh ${srcDir}/gpm.sh "${cmd}" "${param1}" "${param2}" 
}

export -f gpm

#############################################################################################

params=()

for arg in "$@"; do
    params+=("$arg")
done

sourceBranch=""
targetBranch=""
assignee_users=""
labels=""
mr_title=""
projectAlias=""
wip=""

for i in "${!params[@]}"; do
    case "${params[$i]}" in
        -s)
        sourceBranch="${params[$i+1]}"
        ;;
        -t)
        targetBranch="${params[$i+1]}"
        ;;
        -a)
        assignee_users="${assignee_users}${params[$i+1]}"
        ;;
        -l)
        labels="$labels${params[$i+1]}"
        ;;
        -m)
        mr_title="${params[$i+1]}"
        ;;
        --wip)
        wip="true"
        ;;
        -in)
        projectAlias="${params[$i+1]}"
        ;;
        --cnf)
        configureGitProjects
        exit 0
        ;;
        -rm)
        gpm -rm "${params[$i + 1]}"
        exit 0
        ;;
        --rm)
        gpm --rm
        exit 0
        ;;
        --ls)
        gpm --ls
        exit 0
        ;;
        -ae)
        gpm "${params[$i + 1]}"
        exit 0
        ;;
        --version|--v)
        printf "v.4.3.0\n"
        exit 0
        ;;
    esac
done

if [[ -z "${targetBranch}" ]]; then
    printf "\nðŸš¨ Error! Target branch not found!"
    printf "\nðŸ‘‰ Please enter a valide target branch name. Like this: (... -t origin/release ...)\n"
    exit 1;
fi

isAliasExist=$(gpm -ae "${projectAlias}")

if [[ -z "${isAliasExist}" ]]; then
    configureGitProjects
fi

vcs=$(gpm -get "${projectAlias}" "vcs")

if [[ -z "${vcs}" ]];then
    printf "\nðŸš¨ Error! Version Control System not found!"
    printf "\nðŸ‘‰ Please run this command to create new git project alias:"
    printf "\nðŸ‘‰ git mr --new-alias\n"
    exit 1;
fi

data=$(prepareData "${sourceBranch}" "${targetBranch}" "${assignee_users}" "${mr_title}" "${labels}" "${wip}" "${projectAlias}" "${vcs}") 

if [[ "${vcs}" == "gitlab" ]]; then
    sh ${srcDir}/git-lmr "${sourceBranch}" "${targetBranch}" "${assignee_user}" "${mr_title}" "${labels}" "${projectAlias}" 
    elif [[ "${vcs}" == "github" ]]; then
        sh ${srcDir}/git-hmr "${data}"
fi